# calculate p-values
pval = 2 * ( 1 - pnorm( abs(yi) / sqrt(vi) ) )
ggplot( data = data.frame(pval = pval),
aes( x = pval ) ) +
geom_vline(xintercept = 0.025, color = "red", lwd = 1.2) +
geom_vline(xintercept = 0.975, color = "red", lwd = 1.2) +
geom_histogram( binwidth = 0.025 ) +
xlab("One-tailed p-value") +
theme_classic() +
theme( panel.grid = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text=element_text(size=16),
axis.title=element_text(size=16, face = "bold") )
}
pval_plot( yi = dat$yi,
vi = dat$vi )
dat$yi = -dat$yi
pval_plot( yi = dat$yi,
vi = dat$vi )
pval_plot = function( yi,
vi ) {
# calculate 1-tailed p-values
pval = 1 - pnorm( yi / sqrt(vi) )
ggplot( data = data.frame(pval = pval),
aes( x = pval ) ) +
geom_vline(xintercept = 0.025, color = "red", lwd = 1.2) +
geom_vline(xintercept = 0.975, color = "red", lwd = 1.2) +
geom_histogram( binwidth = 0.025 ) +
xlab("One-tailed p-value") +
theme_classic() +
theme( panel.grid = element_blank(),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.text=element_text(size=16),
axis.title=element_text(size=16, face = "bold") )
}
pval_plot( yi = dat$yi,
vi = dat$vi )
dat = escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
pval_plot( yi = dat$yi,
vi = dat$vi )
document()
library(testthat)
#library(MetaUtility)
library(devtools)
library(metafor)
setwd("~/Dropbox/Personal computer/Independent studies/Sensitivity analysis for publication bias (SAPB)/Linked to OSF (SAPB)/R package PublicationBias")
document()
setwd("~/Dropbox/Personal computer/Independent studies/Sensitivity analysis for publication bias (SAPB)/Linked to OSF (SAPB)/R package PublicationBias/PublicationBias")
document()
check()
check()
check(check())
metafor::escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
devtools::run_examples()
significance_funnel( yi = dat$yi,
vi = dat$vi,
plot.pooled = TRUE )
significance_funnel = function( yi,
vi,
xmin = min(yi),
ymin = min( sqrt(vi) ),
xmax = max(yi),
ymax = max( sqrt(vi) ),
plot.pooled = TRUE ) {
d = data.frame(yi, vi)
d$sei = sqrt(vi)
# calculate p-values
d$pval = 2 * ( 1 - pnorm( abs(yi) / sqrt(vi) ) )
# variable for positive vs. nonpositive studies
d$positive = rep(NA, nrow(d))
d$positive[ (d$yi > 0) & (d$pval < 0.05) ] = "Affirmative"
d$positive[ (d$yi < 0) | (d$pval >= 0.05) ] = "Non-affirmative"
# reorder levels for plotting joy
d$positive = factor( d$positive, c("Non-affirmative", "Affirmative") )
# stop if no studies in either group
if ( sum( d$positive == "Non-affirmative" ) == 0 ) {
stop("There are no non-affirmative studies. The plot would look silly.")
}
if ( sum( d$positive == "Affirmative" ) == 0 ) {
stop("There are no affirmative studies. The plot would look silly.")
}
# pooled fixed-effects estimates
est.N = rma.uni(yi = d$yi[ d$positive == "Non-affirmative" ],
vi = d$vi[ d$positive == "Non-affirmative" ],
method="FE")$b
est.all = rma.uni(yi = d$yi,
vi = d$vi,
method="FE")$b
# negative sei positions them below the horizontal divider line
pooled.pts = data.frame( yi = c(est.N, est.all),
sei = c(0,0) )
# for a given SE (y-value), return the "just significant" point estimate value (x-value)
just_signif_est = function( .sei ) .sei * qnorm(.975)
# polygon coordinates for the blue and orange shading
# remember ymin is the min SE, etc.
if ( !any( is.na( c(ymin, xmin, ymax, xmax) ) ) ) {
poly.blue=data.frame(yi=c(xmin, just_signif_est(ymin), just_signif_est(ymax), xmin ),
sei=c(ymin, ymin, ymax, ymax),
positive = rep("Non-affirmative", 4),
alpha = 0.3)
poly.orange=data.frame(yi=c(just_signif_est(ymin), xmax, xmax, just_signif_est(ymax)),
sei=c(ymin, ymin, ymax, ymax ),
positive = rep("Affirmative", 4),
alpha = 0.3)
} else {
# remove objects if they happen to exist
# because will check for existence during plotting
suppressWarnings( rm(poly.blue) )
suppressWarnings( rm(poly.orange) )
}
# # polygon coordinates for the blue and orange shading
# if ( !any( is.na( c(ymin, xmin, ymax, xmax) ) ) ) {
#   poly.blue=data.frame(yi=c(xmin, 0, ymax * qnorm(.975), xmin ),
#                        sei=c(ymin, ymin, ymax, ymax),
#                        positive = rep("Non-affirmative", 4),
#                        alpha = 0.3)
#
#   poly.orange=data.frame(yi=c(0, ymax * qnorm(.975), xmax, xmax ),
#                          sei=c(ymin, ymax, ymax, ymin),
#                          positive = rep("Affirmative", 4),
#                          alpha = 0.3)
# } else {
#   # remove objects if they happen to exist
#   # because will check for existence during plotting
#   suppressWarnings( rm(poly.blue) )
#   suppressWarnings( rm(poly.orange) )
# }
colors = c("blue", "orange")
p.funnel = ggplot( data = d, aes( x = d$yi,
y = d$sei,
color = positive ) )
if ( exists("poly.orange") ) {
p.funnel = p.funnel + geom_polygon(data=poly.blue, mapping=aes(x=poly.blue$yi, y=poly.blue$sei),
fill = colors[1],
alpha = 0.2,
color = NA)
p.funnel = p.funnel +  geom_polygon(data=poly.orange, mapping=aes(x=poly.orange$yi, y=poly.orange$sei),
fill = colors[2],
alpha = 0.2,
color = NA)
}
if ( plot.pooled == TRUE ) {
p.funnel = p.funnel + geom_point(
data = pooled.pts,
size = 4,
shape = 5,
fill = NA,
color = c(colors[1], "black")
) +
geom_point(
data = pooled.pts,
size = 4,
shape = 18,
color = c(colors[1], "black"),
alpha = .3
) +
# just for visual separation of pooled ests
geom_hline( yintercept = 0 )
}
p.funnel = p.funnel +
# semi-transparent points with solid circles around them
geom_point( size = 3, alpha=.3) +
geom_point( size = 3, shape = 1) +
scale_color_manual(values = colors) +
xlab( bquote( hat(theta) ) ) +
ylab( bquote( hat(SE) ) ) +
theme_classic() +
theme(legend.title=element_blank())
plot(p.funnel)
return(p.funnel)
}
significance_funnel( yi = dat$yi,
vi = dat$vi,
plot.pooled = TRUE )
dat = escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
dat$yi = -dat$yi
significance_funnel( yi = dat$yi,
vi = dat$vi,
plot.pooled = TRUE )
significance_funnel = function( yi,
vi,
xmin = min(yi),
ymin = min( sqrt(vi) ),
xmax = max(yi),
ymax = max( sqrt(vi) ),
plot.pooled = TRUE ) {
d = data.frame(yi, vi)
d$sei = sqrt(vi)
# calculate p-values
d$pval = 2 * ( 1 - pnorm( abs(yi) / sqrt(vi) ) )
# variable for positive vs. nonpositive studies
d$positive = rep(NA, nrow(d))
d$positive[ (d$yi > 0) & (d$pval < 0.05) ] = "Affirmative"
d$positive[ (d$yi < 0) | (d$pval >= 0.05) ] = "Non-affirmative"
# reorder levels for plotting joy
d$positive = factor( d$positive, c("Non-affirmative", "Affirmative") )
# stop if no studies in either group
if ( sum( d$positive == "Non-affirmative" ) == 0 ) {
stop("There are no non-affirmative studies. The plot would look silly.")
}
if ( sum( d$positive == "Affirmative" ) == 0 ) {
stop("There are no affirmative studies. The plot would look silly.")
}
# pooled fixed-effects estimates
est.N = rma.uni(yi = d$yi[ d$positive == "Non-affirmative" ],
vi = d$vi[ d$positive == "Non-affirmative" ],
method="FE")$b
est.all = rma.uni(yi = d$yi,
vi = d$vi,
method="FE")$b
# negative sei positions them below the horizontal divider line
pooled.pts = data.frame( yi = c(est.N, est.all),
sei = c(0,0) )
# for a given SE (y-value), return the "just significant" point estimate value (x-value)
just_signif_est = function( .sei ) .sei * qnorm(.975)
# polygon coordinates for the blue and orange shading
# remember ymin is the min SE, etc.
if ( !any( is.na( c(ymin, xmin, ymax, xmax) ) ) ) {
poly.blue=data.frame(yi=c(xmin, just_signif_est(ymin), just_signif_est(ymax), xmin ),
sei=c(ymin, ymin, ymax, ymax),
positive = rep("Non-affirmative", 4),
alpha = 0.3)
poly.orange=data.frame(yi=c(just_signif_est(ymin), xmax, xmax, just_signif_est(ymax)),
sei=c(ymin, ymin, ymax, ymax ),
positive = rep("Affirmative", 4),
alpha = 0.3)
} else {
# remove objects if they happen to exist
# because will check for existence during plotting
suppressWarnings( rm(poly.blue) )
suppressWarnings( rm(poly.orange) )
}
# # polygon coordinates for the blue and orange shading
# if ( !any( is.na( c(ymin, xmin, ymax, xmax) ) ) ) {
#   poly.blue=data.frame(yi=c(xmin, 0, ymax * qnorm(.975), xmin ),
#                        sei=c(ymin, ymin, ymax, ymax),
#                        positive = rep("Non-affirmative", 4),
#                        alpha = 0.3)
#
#   poly.orange=data.frame(yi=c(0, ymax * qnorm(.975), xmax, xmax ),
#                          sei=c(ymin, ymax, ymax, ymin),
#                          positive = rep("Affirmative", 4),
#                          alpha = 0.3)
# } else {
#   # remove objects if they happen to exist
#   # because will check for existence during plotting
#   suppressWarnings( rm(poly.blue) )
#   suppressWarnings( rm(poly.orange) )
# }
colors = c("blue", "orange")
browser()
p.funnel = ggplot( data = d, aes( x = d$yi,
y = d$sei,
color = positive ) )
if ( exists("poly.orange") ) {
p.funnel = p.funnel + geom_polygon(data=poly.blue, mapping=aes(x=poly.blue$yi, y=poly.blue$sei),
fill = colors[1],
alpha = 0.2,
color = NA)
p.funnel = p.funnel +  geom_polygon(data=poly.orange, mapping=aes(x=poly.orange$yi, y=poly.orange$sei),
fill = colors[2],
alpha = 0.2,
color = NA)
}
if ( plot.pooled == TRUE ) {
p.funnel = p.funnel + geom_point(
data = pooled.pts,
size = 4,
shape = 5,
fill = NA,
color = c(colors[1], "black")
) +
geom_point(
data = pooled.pts,
size = 4,
shape = 18,
color = c(colors[1], "black"),
alpha = .3
) +
# just for visual separation of pooled ests
geom_hline( yintercept = 0 )
}
p.funnel = p.funnel +
# semi-transparent points with solid circles around them
geom_point( size = 3, alpha=.3) +
geom_point( size = 3, shape = 1) +
scale_color_manual(values = colors) +
xlab( bquote( hat(theta) ) ) +
ylab( bquote( hat(SE) ) ) +
theme_classic() +
theme(legend.title=element_blank())
plot(p.funnel)
return(p.funnel)
}
significance_funnel( yi = dat$yi,
vi = dat$vi,
plot.pooled = TRUE )
p.funnel
p.funnel
significance_funnel( yi = dat$yi,
vi = dat$vi,
plot.pooled = TRUE )
p.funnel
significance_funnel( yi = dat$yi,
vi = dat$vi,
plot.pooled = TRUE )
p.funnel
p.funnel
pooled.pts
significance_funnel = function( yi,
vi,
xmin = min(yi),
ymin = min( sqrt(vi) ),
xmax = max(yi),
ymax = max( sqrt(vi) ),
plot.pooled = TRUE ) {
d = data.frame(yi, vi)
d$sei = sqrt(vi)
# calculate p-values
d$pval = 2 * ( 1 - pnorm( abs(yi) / sqrt(vi) ) )
# variable for positive vs. nonpositive studies
d$positive = rep(NA, nrow(d))
d$positive[ (d$yi > 0) & (d$pval < 0.05) ] = "Affirmative"
d$positive[ (d$yi < 0) | (d$pval >= 0.05) ] = "Non-affirmative"
# reorder levels for plotting joy
d$positive = factor( d$positive, c("Non-affirmative", "Affirmative") )
# stop if no studies in either group
if ( sum( d$positive == "Non-affirmative" ) == 0 ) {
stop("There are no non-affirmative studies. The plot would look silly.")
}
if ( sum( d$positive == "Affirmative" ) == 0 ) {
stop("There are no affirmative studies. The plot would look silly.")
}
# pooled fixed-effects estimates
est.N = rma.uni(yi = d$yi[ d$positive == "Non-affirmative" ],
vi = d$vi[ d$positive == "Non-affirmative" ],
method="FE")$b
est.all = rma.uni(yi = d$yi,
vi = d$vi,
method="FE")$b
# negative sei positions them below the horizontal divider line
pooled.pts = data.frame( yi = c(est.N, est.all),
sei = c(0,0) )
# for a given SE (y-value), return the "just significant" point estimate value (x-value)
just_signif_est = function( .sei ) .sei * qnorm(.975)
# polygon coordinates for the blue and orange shading
# remember ymin is the min SE, etc.
if ( !any( is.na( c(ymin, xmin, ymax, xmax) ) ) ) {
poly.blue=data.frame(yi=c(xmin, just_signif_est(ymin), just_signif_est(ymax), xmin ),
sei=c(ymin, ymin, ymax, ymax),
positive = rep("Non-affirmative", 4),
alpha = 0.3)
poly.orange=data.frame(yi=c(just_signif_est(ymin), xmax, xmax, just_signif_est(ymax)),
sei=c(ymin, ymin, ymax, ymax ),
positive = rep("Affirmative", 4),
alpha = 0.3)
} else {
# remove objects if they happen to exist
# because will check for existence during plotting
suppressWarnings( rm(poly.blue) )
suppressWarnings( rm(poly.orange) )
}
# # polygon coordinates for the blue and orange shading
# if ( !any( is.na( c(ymin, xmin, ymax, xmax) ) ) ) {
#   poly.blue=data.frame(yi=c(xmin, 0, ymax * qnorm(.975), xmin ),
#                        sei=c(ymin, ymin, ymax, ymax),
#                        positive = rep("Non-affirmative", 4),
#                        alpha = 0.3)
#
#   poly.orange=data.frame(yi=c(0, ymax * qnorm(.975), xmax, xmax ),
#                          sei=c(ymin, ymax, ymax, ymin),
#                          positive = rep("Affirmative", 4),
#                          alpha = 0.3)
# } else {
#   # remove objects if they happen to exist
#   # because will check for existence during plotting
#   suppressWarnings( rm(poly.blue) )
#   suppressWarnings( rm(poly.orange) )
# }
colors = c("blue", "orange")
browser()
p.funnel = ggplot( data = d, aes( x = d$yi,
y = d$sei,
color = positive ) )
if ( exists("poly.orange") ) {
p.funnel = p.funnel + geom_polygon(data=poly.blue, mapping=aes(x=poly.blue$yi, y=poly.blue$sei),
fill = colors[1],
alpha = 0.2,
color = NA)
p.funnel = p.funnel +  geom_polygon(data=poly.orange, mapping=aes(x=poly.orange$yi, y=poly.orange$sei),
fill = colors[2],
alpha = 0.2,
color = NA)
}
if ( plot.pooled == TRUE ) {
p.funnel = p.funnel + geom_point(
data = pooled.pts,
aes( x = pooled.pts$yi, y = pooled.pts$sei ),
size = 4,
shape = 5,
fill = NA,
color = c(colors[1], "black")
) +
geom_point(
data = pooled.pts,
aes( x = pooled.pts$yi, y = pooled.pts$sei ),
size = 4,
shape = 18,
color = c(colors[1], "black"),
alpha = .3
) +
# just for visual separation of pooled ests
geom_hline( yintercept = 0 )
}
p.funnel = p.funnel +
# semi-transparent points with solid circles around them
geom_point( size = 3, alpha=.3) +
geom_point( size = 3, shape = 1) +
scale_color_manual(values = colors) +
xlab( bquote( hat(theta) ) ) +
ylab( bquote( hat(SE) ) ) +
theme_classic() +
theme(legend.title=element_blank())
plot(p.funnel)
return(p.funnel)
}
significance_funnel( yi = dat$yi,
vi = dat$vi,
plot.pooled = TRUE )
p.funnel
p.funnel
p.funnel
source('~/Dropbox/Personal computer/Independent studies/Sensitivity analysis for publication bias (SAPB)/Linked to OSF (SAPB)/R package PublicationBias/PublicationBias/R/functions.R')
run_examples()
check()
?plot
check()
ls("package:dplyr")
check()
?corrected_meta
# calculate effect sizes from example dataset in metafor
require(metafor)
dat = metafor::escalc(measure="RR", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg)
# first fit fixed-effects model without any bias correction
rma( yi, vi, data = dat, method = "FE" )
# notice this is the same as passing eta = 1 to corrected_meta, which makes sense
corrected_meta( yi = dat$yi,
vi = dat$vi,
eta = 1,
model = "fixed",
selection.tails = 1,
CI.level = 0.95,
small = TRUE )
# assume a known selection ratio of 5
# i.e., affirmative results are 5x more likely to be published
#  than nonaffirmative
corrected_meta( yi = dat$yi,
vi = dat$vi,
eta = 5,
model = "fixed",
selection.tails = 1,
CI.level = 0.95,
small = TRUE )
# same selection ratio, but now account for heterogeneity
# and clustering via robust specification
corrected_meta( yi = dat$yi,
vi = dat$vi,
eta = 5,
clustervar = dat$author,
model = "robust",
selection.tails = 1,
CI.level = 0.95,
small = TRUE )
##### Make sensitivity plot as in Mathur & VanderWeele (2019) #####
# range of parameters to try (more dense at the very small ones)
eta.list = as.list( c( 200, 150, 100, 50, 40, 30, 20, rev( seq(1,15,1) ) ) )
res.list = lapply( eta.list, function(x) {
cat("\n Working on eta = ", x)
return( corrected_meta( yi = dat$yi,
vi = dat$vi,
eta = x,
model = "robust",
clustervar = dat$author ) )
}
)
# put results for each eta in a dataframe
res.df = as.data.frame( do.call( "rbind", res.list ) )
require(ggplot)
ggplot( data = res.df, aes( x = eta, y = est ) ) +
geom_ribbon( data = res.df, aes( x = eta, ymin = lo, ymax = hi ), fill = "gray" ) +
geom_line( lwd = 1.2 ) +
xlab( bquote( eta ) ) +
ylab( bquote( hat(mu)[eta] ) ) +
theme_classic()
document()
run_examples()
source('~/Dropbox/Personal computer/Independent studies/Sensitivity analysis for publication bias (SAPB)/Linked to OSF (SAPB)/R package PublicationBias/PublicationBias/R/functions.R')
run_examples()
check()
source('~/Dropbox/Personal computer/Independent studies/Sensitivity analysis for publication bias (SAPB)/Linked to OSF (SAPB)/R package PublicationBias/PublicationBias/R/functions.R')
check()
source('~/Dropbox/Personal computer/Independent studies/Sensitivity analysis for publication bias (SAPB)/Linked to OSF (SAPB)/R package PublicationBias/PublicationBias/R/functions.R')
check()
check()
?pval_plot
?significance_funnel
?svalue
?corrected_meta
